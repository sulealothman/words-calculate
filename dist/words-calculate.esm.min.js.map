{"version":3,"file":"words-calculate.esm.min.js","mappings":"AACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,KCKlF,SAASI,EAAiBC,GACtB,OAAOA,EAAKC,QAAQ,KAAM,IAAIA,QAAQ,KAAM,MAAMA,QAAQ,KAAM,MAAMA,QAAQ,KAAM,MAAMA,QAAQ,KAAM,MAQ5G,SAASC,EAAWF,GAChB,MAAMG,EAAQH,EAAKI,OAAOD,MAAM,mCAChC,OAAiB,OAAVA,EAAiBA,EAAME,OAAS,EAAoB,KAAhBL,EAAKI,OAAgB,EAAI,EAQxE,SAASE,EAAWN,GAChB,OAAOA,EAAKK,OAQhB,SAASE,EAAeP,GACpB,IAAIG,EAAQH,EAAKG,MAAM,YACvB,OAAiB,OAAVA,EAAiBA,EAAME,OAAS,EAQ3C,SAASG,EAAkBR,GACvB,IAAIG,EAAQH,EAAKG,MAAM,kBACvB,OAAiB,OAAVA,EAAiBA,EAAME,OAAS,EAQ3C,SAASI,EAA8BT,GACnC,IAAIG,EAAQH,EAAKG,MAAM,uBACvB,OAAiB,OAAVA,EAAiBA,EAAME,OAAS,EAQ1C,SAASK,EAAeV,GACrB,IAAIG,EAAQH,EAAKG,MAAM,YACvB,OAAiB,OAAVA,EAAiBA,EAAME,OAAS,EAQ3C,SAASM,EAAeX,GACpB,MAAMG,EAAQH,EAAKI,OAAOD,MAAM,6CAChC,OAAiB,OAAVA,EAAiBA,EAAME,OAAS,EAAoB,KAAhBL,EAAKI,OAAgB,EAAI,EAQxE,SAASQ,EAAgBZ,GACrB,MAAMG,EAAQH,EAAKI,OAAOD,MAAM,YAChC,OAAiB,OAAVA,EAAiBA,EAAME,OAAS,EAAoB,KAAhBL,EAAKI,OAAgB,EAAI,EAQvE,SAASS,EAAWb,GACjB,MAAMG,EAAQH,EAAKI,OAAOD,MAAM,eAChC,OAAiB,OAAVA,EAAiBA,EAAME,OAAS,EAAoB,KAAhBL,EAAKI,OAAgB,EAAI,EAQxE,SAASU,EAAed,GAEpB,MAAO,CACHe,YAAab,EAFjBF,EAAOD,EAAiBC,IAGpBgB,iBAAkBV,EAAWN,GAC7BiB,gBAAiBV,EAAeP,GAChCkB,mBAAoBV,EAAkBR,GACtCmB,gBAAiBT,EAAeV,GAChCoB,4BAA6BX,EAA8BT,GAC3DqB,gBAAiBV,EAAeX,GAChCsB,iBAAkBV,EAAgBZ,GAClCuB,YAAaV,EAAWb,I","sources":["webpack://words-calculate/webpack/bootstrap","webpack://words-calculate/webpack/runtime/define property getters","webpack://words-calculate/webpack/runtime/hasOwnProperty shorthand","webpack://words-calculate/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * @description Splits the combined characters\n * @param {string} text a string for inspect\n * @returns the orginal character\n */\nfunction splitCombineChar(text) {\n    return text.replace(/ـ/g, '').replace(/ﻻ/g, 'لا').replace(/ﻹ/g, 'لإ').replace(/ﻷ/g, 'لأ').replace(/ﻵ/g, 'لآ');\n}\n\n/**\n * @description Count the whole text words\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text words\n */\nfunction wordsCount(text) {\n    const match = text.trim().match(/\\s([\\p{L}|\\p{N}|\\p{S}|\\p{P}])/gu);\n    return match !== null ? match.length + 1 : text.trim() !== '' ? 1 : 0;\n}\n\n/**\n * @description Count the whole text characters\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text characters\n */\nfunction charsCount(text) {\n    return text.length;\n}\n\n/**\n * @description Count the whole text alphabets\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text alphabets\n */\nfunction alphabetsCount(text) {\n    let match = text.match(/\\p{L}/gui);\n    return match !== null ? match.length : 0;\n}\n\n/**\n * @description Count the whole text alphanumerics\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text alphanumerics\n */\nfunction alphanumericCount(text) {\n    let match = text.match(/\\p{L}|\\p{N}/gui);\n    return match !== null ? match.length : 0;\n}\n\n/**\n * @description Count the whole text alphanumerics and tashkeels\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text alphanumerics and tashkeels\n */\nfunction alphanumericWithTashkeelCount(text) {\n    let match = text.match(/\\p{L}|\\p{N}|[ً-ْ]/gu);\n    return match !== null ? match.length : 0;\n}\n\n/**\n * @description Count the whole text tashkeels\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text tashkeels\n */\n function tashkeelsCount(text) {\n    let match = text.match(/[ً-ْ]/gui);\n    return match !== null ? match.length : 0;\n}\n\n/**\n * @description Count the whole text sentences\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text sentences\n */\nfunction sentencesCount(text) {\n    const match = text.trim().match(/(?![-:_#@%\\*'\"\\(\\)\\[\\]\\{\\}\\\\\\/])\\p{P}\\s/gu);\n    return match !== null ? match.length + 1 : text.trim() !== '' ? 1 : 0;\n}\n\n/**\n * @description Count the whole text paragraphs\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text paragraphs\n */\nfunction paragraphsCount(text) {\n    const match = text.trim().match(/\\n\\s*\\n/g);\n    return match !== null ? match.length + 1 : text.trim() !== '' ? 1 : 0;\n}\n\n/**\n * @description Count the whole text lines\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text lines\n */\n function linesCount(text) {\n    const match = text.trim().match(/\\r\\n|\\r|\\n/g);\n    return match !== null ? match.length + 1 : text.trim() !== '' ? 1 : 0;\n}\n\n/**\n * @description Counts the text's object\n * @param {string} text a string for inspect\n * @returns {object} the text's object\n */\nfunction calculateWords(text) {\n    text = splitCombineChar(text);\n    return {\n        words_count: wordsCount(text),\n        characters_count: charsCount(text),\n        alphabets_count: alphabetsCount(text),\n        alphanumeric_count: alphanumericCount(text),\n        tashkeels_count: tashkeelsCount(text),\n        alphanumeric_tashkeel_count: alphanumericWithTashkeelCount(text),\n        sentences_count: sentencesCount(text),\n        paragraphs_count: paragraphsCount(text),\n        lines_count: linesCount(text)\n    }\n}\n\nexport {\n    splitCombineChar,\n    wordsCount,\n    charsCount,\n    alphabetsCount,\n    alphanumericCount,\n    alphanumericWithTashkeelCount,\n    tashkeelsCount,\n    sentencesCount,\n    paragraphsCount,\n    linesCount,\n    calculateWords\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","splitCombineChar","text","replace","wordsCount","match","trim","length","charsCount","alphabetsCount","alphanumericCount","alphanumericWithTashkeelCount","tashkeelsCount","sentencesCount","paragraphsCount","linesCount","calculateWords","words_count","characters_count","alphabets_count","alphanumeric_count","tashkeels_count","alphanumeric_tashkeel_count","sentences_count","paragraphs_count","lines_count"],"sourceRoot":""}