{"version":3,"file":"words-calculate.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;UCVA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA,4CAA4C,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AAChE;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA,+BAA+B,EAAE,IAAI,EAAE;AACvC;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA,+BAA+B,EAAE,IAAI,EAAE;AACvC;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA,6DAA6D,EAAE,SAAS,EAAE;AAC1E;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAcC","sources":["webpack://words-calculate/webpack/universalModuleDefinition","webpack://words-calculate/webpack/bootstrap","webpack://words-calculate/webpack/runtime/define property getters","webpack://words-calculate/webpack/runtime/hasOwnProperty shorthand","webpack://words-calculate/webpack/runtime/make namespace object","webpack://words-calculate/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @description Splits the combined characters\n * @param {string} text a string for inspect\n * @returns the orginal character\n */\nfunction splitCombineChar(text) {\n    return text.replace(/ـ/g, '').replace(/ﻻ/g, 'لا').replace(/ﻹ/g, 'لإ').replace(/ﻷ/g, 'لأ').replace(/ﻵ/g, 'لآ');\n}\n\n/**\n * @description Count the whole text words\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text words\n */\nfunction wordsCount(text) {\n    const match = text.trim().match(/\\s([\\p{L}|\\p{N}|\\p{S}|\\p{P}])/gu);\n    return match !== null ? match.length + 1 : text.trim() !== '' ? 1 : 0;\n}\n\n/**\n * @description Count the whole text characters\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text characters\n */\nfunction charsCount(text) {\n    return text.length;\n}\n\n/**\n * @description Count the whole text alphabets\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text alphabets\n */\nfunction alphabetsCount(text) {\n    let match = text.match(/\\p{L}/gui);\n    return match !== null ? match.length : 0;\n}\n\n/**\n * @description Count the whole text alphanumerics\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text alphanumerics\n */\nfunction alphanumericCount(text) {\n    let match = text.match(/\\p{L}|\\p{N}/gui);\n    return match !== null ? match.length : 0;\n}\n\n/**\n * @description Count the whole text alphanumerics and tashkeels\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text alphanumerics and tashkeels\n */\nfunction alphanumericWithTashkeelCount(text) {\n    let match = text.match(/\\p{L}|\\p{N}|[ً-ْ]/gu);\n    return match !== null ? match.length : 0;\n}\n\n/**\n * @description Count the whole text tashkeels\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text tashkeels\n */\n function tashkeelsCount(text) {\n    let match = text.match(/[ً-ْ]/gui);\n    return match !== null ? match.length : 0;\n}\n\n/**\n * @description Count the whole text sentences\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text sentences\n */\nfunction sentencesCount(text) {\n    const match = text.trim().match(/(?![-:_#@%\\*'\"\\(\\)\\[\\]\\{\\}\\\\\\/])\\p{P}\\s/gu);\n    return match !== null ? match.length + 1 : text.trim() !== '' ? 1 : 0;\n}\n\n/**\n * @description Count the whole text paragraphs\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text paragraphs\n */\nfunction paragraphsCount(text) {\n    const match = text.trim().match(/\\n\\s*\\n/g);\n    return match !== null ? match.length + 1 : text.trim() !== '' ? 1 : 0;\n}\n\n/**\n * @description Count the whole text lines\n * @param {string} text a string for inspect\n * @returns {number} the count of the whole text lines\n */\n function linesCount(text) {\n    const match = text.trim().match(/\\r\\n|\\r|\\n/g);\n    return match !== null ? match.length + 1 : text.trim() !== '' ? 1 : 0;\n}\n\n/**\n * @description Counts the text's object\n * @param {string} text a string for inspect\n * @returns {object} the text's object\n */\nfunction calculateWords(text) {\n    text = splitCombineChar(text);\n    return {\n        words_count: wordsCount(text),\n        characters_count: charsCount(text),\n        alphabets_count: alphabetsCount(text),\n        alphanumeric_count: alphanumericCount(text),\n        tashkeels_count: tashkeelsCount(text),\n        alphanumeric_tashkeel_count: alphanumericWithTashkeelCount(text),\n        sentences_count: sentencesCount(text),\n        paragraphs_count: paragraphsCount(text),\n        lines_count: linesCount(text)\n    }\n}\n\nexport {\n    splitCombineChar,\n    wordsCount,\n    charsCount,\n    alphabetsCount,\n    alphanumericCount,\n    alphanumericWithTashkeelCount,\n    tashkeelsCount,\n    sentencesCount,\n    paragraphsCount,\n    linesCount,\n    calculateWords\n}\n"],"names":[],"sourceRoot":""}